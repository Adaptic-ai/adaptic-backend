name: Publish to npm

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Clean node_modules
        run: rm -rf node_modules

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies in the root folder
        run: npm install

      - name: Build npm package
        run: npm run build:package

      - name: Install dependencies in dist folder
        working-directory: dist
        run: npm install

      - name: Set up Git user
        run: |
          git config --global user.name "mehran9"
          git config --global user.email "mgranfar@gmail.com"

      - name: Get package name and version
        id: package_info
        working-directory: dist
        run: |
          PACKAGE_NAME=$(jq -r .name package.json)
          PACKAGE_VERSION=$(jq -r .version package.json)
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Check if package exists on npm
        id: check_npm_package_exists
        run: |
          if npm view ${{ env.PACKAGE_NAME }} > /dev/null 2>&1; then
            echo "package_exists=true" >> $GITHUB_ENV
          else
            echo "package_exists=false" >> $GITHUB_ENV
          fi

      - name: Get current package content from npm (if it exists)
        id: get_npm_package_content
        if: env.package_exists == 'true'
        run: |
          npm view ${{ env.PACKAGE_NAME }}@${{ env.PACKAGE_VERSION }} dist.tarball | xargs curl -sL | tar -tzf - > ../npm_package_files.txt

      - name: Create empty npm_package_files.txt (if package does not exist)
        if: env.package_exists == 'false'
        run: |
          echo "Package does not exist on npm. Creating empty npm_package_files.txt."
          touch ../npm_package_files.txt

      - name: List local dist files
        id: list_dist_files
        run: find . -type f | sed 's|^\./||' > ../local_dist_files.txt
        working-directory: dist

      - name: Compare dist content with published package
        id: compare_dist
        run: |
          comm -3 <(sort local_dist_files.txt) <(sort npm_package_files.txt) > diff.txt || true
          if [ -s diff.txt ]; then
            echo "Differences found."
            cat diff.txt
            echo "diff_output=true" >> $GITHUB_ENV
          else
            echo "No differences found."
            echo "diff_output=false" >> $GITHUB_ENV
          fi

      - name: Determine if publish is necessary
        id: should_publish
        run: |
          if [ "${{ env.diff_output }}" == "false" ]; then
            echo "No changes detected. Skipping publish."
            echo "should_publish=false" >> $GITHUB_ENV
          else
            echo "Changes detected or first-time publish. Proceeding with publish."
            echo "should_publish=true" >> $GITHUB_ENV
          fi

      - name: Bump version if necessary
        if: env.should_publish == 'true'
        run: |
          echo "Checking current version..."

          # Get the current version from package-npm.json
          CURRENT_VERSION=$(jq -r .version package-npm.json)
          echo "Current version is $CURRENT_VERSION"

          # Move to the directory where npm version bump should occur
          cd dist

          # Bump the version using npm and strip the "v" prefix
          NEW_VERSION=$(npm version patch --no-git-tag-version --allow-same-version | sed 's/^v//')
          echo "New version is $NEW_VERSION"

          # Move back to the root directory
          cd ..

          # Update the version in package-npm.json
          jq --arg new_version "$NEW_VERSION" '.version=$new_version' package-npm.json > tmp.json && mv tmp.json package-npm.json
          echo "Updated package-npm.json to version $NEW_VERSION"

          # Update the version in dist/package.json
          jq --arg new_version "$NEW_VERSION" '.version=$new_version' dist/package.json > tmp.json && mv tmp.json dist/package.json
          echo "Updated dist/package.json to version $NEW_VERSION"

          # Ensure both files are staged for commit
          git add package-npm.json dist/package.json -f

          # Check for changes and commit if there are any
          if git diff-index --cached --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "ci: bump version to $NEW_VERSION"
          fi

      - name: Push changes
        if: env.should_publish == 'true'
        run: |
          git push origin HEAD:main

      - name: Publish package
        if: env.should_publish == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: dist
        run: |
          # Ensure temporary files are removed
          rm -f ../npm_package_files.txt ../local_dist_files.txt diff.txt
          npm publish
