generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ### Enums
enum UserRole {
  OWNER
  ADMIN
  USER
}

enum AssetType {
  STOCK
  ETF
  MUTUAL_FUND
  CRYPTOCURRENCY
  INDEX
  COMMODITY
  CURRENCY
  OPTION
  FUTURE
  BOND
  WARRANT
  ADR
  GDR
  UNIT
  RIGHT
  REIT
  CLOSED_END_FUND
  STRUCTURED_PRODUCT
  SWAP
  SPOT
  FORWARD
  OTHER
}

enum TradingAccountType {
  PAPER
  LIVE
}

enum TradeAction {
  BUY
  SELL
}

enum TradeStepAction {
  ENTER
  HEDGE
  EXIT
}

enum TradeStepSide {
  BUY
  SELL
}

enum TradeStepStatus {
  STAGED
  EXECUTED
  COMPLETED
}

enum TradeStatus {
  STAGED
  ACTIVE
  PARTIAL
  COMPLETED
}

enum OrderType {
  MARKET
  LIMIT
  STOP
  STOP_LIMIT
}

enum OrderStatus {
  PENDING
  FILLED
  CANCELLED
  REJECTED
}

enum AlertType {
  SUCCESS
  WARNING
  ERROR
  INFO
}

enum EventImportance {
  LOW
  MEDIUM
  HIGH
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
}

/// ### Models
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  role               UserRole            @default(USER)
  bio                String?
  jobTitle           String?
  currentMode        String?             @default("paper")
  customer           Customer?           @relation(fields: [customerId], references: [id])
  customerId         Int?
  accounts           Account[]
  sessions           Session[]
  authenticators     Authenticator[]
  plan               SubscriptionPlan?
  trades             Trade[]
  orders             Order[]
  aiRecommendations  AIRecommendation[]
  riskAllocations    RiskAllocation[]
  alerts             Alert[]
  performanceMetrics PerformanceMetric[]
  tradingAccount     TradingAccount[]
  alpacaAccount      AlpacaAccount?
  alpacaAccountId    String?             @unique @db.Uuid

  @@map(name: "users")
}

model AlpacaAccount {
  id            String   @id @default(uuid()) @db.Uuid
  APIKey        String
  APISecret     String
  configuration Json?
  updatedAt     DateTime @default(now()) @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique @db.Uuid

  @@map(name: "alpaca_accounts")
}

model Authenticator {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  credentialID String   @unique
  publicKey    String
  counter      Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@index([userId])
  @@map(name: "authenticators")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model TradingAccount {
  id                   String                @id @default(uuid()) @db.Uuid
  name                 String
  slug                 String                @unique
  type                 TradingAccountType
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String                @db.Uuid
  holdings             Holding[]
  trades               Trade[]
  orders               Order[]
  aiRecommendations    AIRecommendation[]
  riskAllocations      RiskAllocation[]
  alerts               Alert[]
  performanceMetrics   PerformanceMetric[]
  environmentVariables EnvironmentVariable[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
}

model EnvironmentVariable {
  id          String         @id @default(uuid()) @db.Uuid
  key         String
  value       String
  description String?
  portfolioId String         @db.Uuid
  portfolio   TradingAccount @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())

  @@unique([portfolioId, key])
  @@map(name: "environment_variables")
}

model Customer {
  id                     Int               @id @default(autoincrement())
  authUserId             String
  name                   String?
  plan                   SubscriptionPlan?
  stripeCustomerId       String?           @unique
  stripeSubscriptionId   String?           @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now())
  users                  User[]

  @@index([authUserId])
}

model Asset {
  id                         String                      @id @default(uuid()) @db.Uuid
  symbol                     String                      @unique
  name                       String                      @unique
  type                       AssetType
  logoUrl                    String?
  description                String?
  cik                        String?
  exchange                   String?
  currency                   String?
  country                    String?
  sector                     String?
  industry                   String?
  address                    String?
  officialSite               String?
  fiscalYearEnd              String?
  latestQuarter              String?
  marketCapitalization       String?
  ebitda                     String?
  peRatio                    String?
  pegRatio                   String?
  bookValue                  String?
  dividendPerShare           String?
  dividendYield              String?
  eps                        String?
  revenuePerShareTTM         String?
  profitMargin               String?
  operatingMarginTTM         String?
  returnOnAssetsTTM          String?
  returnOnEquityTTM          String?
  revenueTTM                 String?
  grossProfitTTM             String?
  dilutedEPSTTM              String?
  quarterlyEarningsGrowthYOY String?
  quarterlyRevenueGrowthYOY  String?
  analystTargetPrice         String?
  analystRatingStrongBuy     String?
  analystRatingBuy           String?
  analystRatingHold          String?
  analystRatingSell          String?
  analystRatingStrongSell    String?
  trailingPE                 String?
  forwardPE                  String?
  priceToSalesRatioTTM       String?
  priceToBookRatio           String?
  evToRevenue                String?
  evToEbitda                 String?
  beta                       String?
  week52High                 String?
  week52Low                  String?
  day50MovingAverage         String?
  day200MovingAverage        String?
  sharesOutstanding          String?
  dividendDate               String?
  exDividendDate             String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now())
  holdings                   Holding[]
  trades                     Trade[]
  orders                     Order[]
  aiRecommendations          AIRecommendation[]
  newsMentions               NewsArticleAssetSentiment[]

  @@map(name: "assets")
}

model Holding {
  id               String   @id @default(uuid()) @db.Uuid
  tradingAccountId String   @db.Uuid
  assetId          String   @db.Uuid
  quantity         Float
  averagePrice     Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  tradingAccount TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)
  asset          Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([tradingAccountId, assetId])
  @@map(name: "holdings")
}

model Trade {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  portfolioId String      @db.Uuid
  assetId     String      @db.Uuid
  action      TradeAction
  quantity    Float
  price       Float
  total       Float
  timestamp   DateTime    @default(now()) @map(name: "timestamp")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  status      TradeStatus @default(STAGED)

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio TradingAccount @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  asset     Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  steps     TradeStep[]

  @@map(name: "trades")
}

model TradeStep {
  id            String          @id @default(uuid()) @db.Uuid
  tradeId       String          @db.Uuid
  sequence      Int
  action        TradeStepAction
  hedgeType     String?
  hedgePrice    Float?
  buyPrice      Float?
  sellPrice     Float?
  qty           Float
  side          TradeStepSide
  type          OrderType
  stopLoss      Float?
  targetPrice   Float?
  note          String
  executionTime DateTime?
  status        TradeStepStatus
  fee           Float?

  // Relations
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map(name: "trade_steps")
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  portfolioId String      @db.Uuid
  assetId     String      @db.Uuid
  type        OrderType
  action      TradeAction
  quantity    Float
  price       Float
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio TradingAccount @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  asset     Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map(name: "orders")
}

model AIRecommendation {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  portfolioId String      @db.Uuid
  assetId     String      @db.Uuid
  action      TradeAction
  confidence  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio TradingAccount @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  asset     Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map(name: "ai_recommendations")
}

model RiskAllocation {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  portfolioId String    @db.Uuid
  assetType   AssetType
  allocation  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio TradingAccount @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([userId, portfolioId, assetType])
  @@map(name: "risk_allocations")
}

model Alert {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  portfolioId String    @db.Uuid
  message     String
  type        AlertType
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio TradingAccount @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map(name: "alerts")
}

model NewsArticle {
  id            String                      @id @default(uuid()) @db.Uuid
  title         String
  content       String?
  source        String
  sourceDomain  String?
  url           String                      @unique
  sentiment     String
  authors       String[]
  summary       String?
  bannerImage   String?
  timePublished String
  category      String?
  topics        String[]
  logo          String?
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @default(now())
  assets        NewsArticleAssetSentiment[]

  @@map(name: "news")
}

model NewsArticleAssetSentiment {
  id             String      @id @default(uuid()) @db.Uuid
  assetId        String      @db.Uuid
  newsArticleId  String      @db.Uuid
  url            String      @unique
  news           NewsArticle @relation(fields: [newsArticleId], references: [id])
  asset          Asset       @relation(fields: [assetId], references: [id])
  relevancyScore String?
  sentimentScore String?
  sentimentLabel String?
}

model EconomicEvent {
  id          String          @id @default(uuid()) @db.Uuid
  title       String
  description String?
  date        DateTime
  importance  EventImportance
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())

  @@map(name: "economic_events")
}

model PerformanceMetric {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  portfolioId String   @db.Uuid
  label       String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio TradingAccount @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map(name: "performance_metrics")
}
