generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ### Enums

// Defines the different roles a user can have within the platform, determining their permissions and access levels.
enum UserRole {
  /// The primary owner with full control over the platform.
  OWNER

  /// An administrative user with elevated permissions.
  ADMIN

  /// A regular user with standard access.
  USER
}

// Represents the various types of financial assets supported by the trading platform.
enum AssetType {
  /// Represents a share of ownership in a corporation.
  STOCK

  /// Exchange-Traded Fund, a type of investment fund traded on stock exchanges.
  ETF

  /// A mutual fund that pools money from many investors to purchase securities.
  MUTUAL_FUND

  /// Digital or virtual currencies using cryptography for security.
  CRYPTOCURRENCY

  /// A market index representing a collection of stocks.
  INDEX

  /// Physical goods such as gold, oil, or agricultural products.
  COMMODITY

  /// Traditional currencies used in international trade.
  CURRENCY

  /// Contracts that give the holder the right to buy or sell an asset at a set price.
  OPTION

  /// Financial contracts obligating the buyer to purchase an asset at a future date.
  FUTURE

  /// Debt securities issued by entities to raise capital.
  BOND

  /// Securities that give the holder the right to purchase stock at a specific price.
  WARRANT

  /// American Depositary Receipts representing shares in foreign companies.
  ADR

  /// Global Depositary Receipts representing shares in foreign companies.
  GDR

  /// Units of ownership in investment funds or trusts.
  UNIT

  /// Rights granted to shareholders, such as voting or dividend rights.
  RIGHT

  /// Real Estate Investment Trusts, companies that own or finance income-producing real estate.
  REIT

  /// Investment products structured to meet specific needs.
  STRUCTURED_PRODUCT

  /// Financial contracts to exchange cash flows between parties.
  SWAP

  /// Immediate exchange of financial instruments.
  SPOT

  /// Agreements to buy or sell an asset at a future date.
  FORWARD

  /// Any other type of asset not classified above.
  OTHER
}

// Specifies the type of Alpaca account being used.
enum AlpacaAccountType {
  /// A simulated trading account for testing strategies without real money.
  PAPER

  /// A live trading account with real funds.
  LIVE
}

// Enumerates the possible actions that can be performed on a trade.
enum ActionType {
  /// Initiates a purchase of an asset.
  BUY

  /// Initiates a purchase of an option contract.
  BUY_OPTION

  /// Retrieves option contracts related to the trade.
  GET_OPTION_CONTRACTS

  /// Exercises an option to buy or sell the underlying asset.
  EXERCISE_OPTION

  /// Initiates the sale of an asset.
  SELL

  /// Cancels an existing trade action.
  CANCEL

  /// Modifies the parameters of an existing trade.
  ADJUST

  /// Implements a hedging strategy to mitigate risk.
  HEDGE
}

// Indicates the side of a trade action, whether buying or selling.
enum OrderSide {
  /// Represents the buying side of a trade action.
  BUY

  /// Represents the selling side of a trade action.
  SELL
}

// Represents the current status of a trade action.
enum ActionStatus {
  /// The trade action is planned and awaiting execution.
  STAGED

  /// The trade action has been executed but not yet finalized.
  EXECUTED

  /// The trade action has been fully completed.
  COMPLETED
}

// Indicates the current status of a trade.
enum TradeStatus {
  /// The trade is pending and has not yet been processed.
  PENDING

  /// The trade is currently open and active.
  OPEN

  /// The trade is partially filled.
  PARTIAL

  /// The trade has been fully completed.
  COMPLETED
}

// Defines the types of orders that can be placed in the market.
enum OrderType {
  /// An order to buy or sell immediately at the current market price.
  MARKET

  /// An order to buy or sell at a specified price or better.
  LIMIT

  /// An order to buy or sell once the price reaches a specified level.
  STOP

  /// An order that combines a stop order and a limit order.
  STOP_LIMIT

  /// An order that adjusts the stop price based on the asset's price movement.
  TRAILING_STOP
}

// Specifies the type of option contract (CALL or PUT).
enum OptionContractType {
  /// A contract that gives the holder the right to buy the underlying asset.
  CALL

  /// A contract that gives the holder the right to sell the underlying asset.
  PUT
}

// Represents the current status of an order.

enum OrderStatus {
  /// The order has been received but not yet processed.
  NEW

  /// The order has been received and is being processed.
  PARTIALLY_FILLED

  /// The order has been fully executed
  FILLED

  /// The order has been canceled by the user or system.
  CANCELED

  /// The order was rejected by the broker or exchange.
  REJECTED

  /// The order has expired and is no longer valid.
  EXPIRED
}

/// Time in force enum (day, gtc, opg, cls, etc.).
enum TimeInForce {
  /// The order is valid for the day and expires at market close.
  DAY

  /// The order is valid until canceled by the user.
  GTC

  /// The order is valid for the opening of the market.
  OPG

  /// The order is valid until the close of the market.
  CLS

  /// The order must be executed immediately or canceled.
  IOC

  /// The order must be executed immediately or canceled.
  FOK
}

// Categorizes the types of alerts that can be generated.
enum AlertType {
  /// Indicates a successful operation or event.
  SUCCESS

  /// Represents a warning that requires attention.
  WARNING

  /// Signifies an error that needs to be addressed.
  ERROR

  /// Provides informational messages to the user.
  INFO
}

// Specifies the importance level of an event.
enum EventImportance {
  /// Low importance events with minimal impact.
  LOW

  /// Medium importance events with noticeable impact.
  MEDIUM

  /// High importance events with significant impact.
  HIGH
}

// Defines the subscription plans available to users.
enum SubscriptionPlan {
  /// A free plan with limited features.
  FREE

  /// A professional plan with enhanced features.
  PRO

  /// A business plan tailored for organizational needs.
  BUSINESS
}

/// ### Models

// Represents a user session for authentication purposes.
model Session {
  /// Unique identifier for the session. SKIP=true
  id String @id @default(cuid())

  /// Token associated with the session for authentication. SKIP=true
  sessionToken String @unique

  /// Reference to the user who owns this session. SKIP=true
  userId String @db.Uuid

  /// Expiration date and time of the session.
  expires DateTime

  /// Relation to the User model. INCLUDE=['id','name','email']
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Timestamp when the session was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the session was last updated. SKIP=true
  updatedAt DateTime @default(now())

  @@index([userId])
  @@map(name: "sessions")
}

// Represents a user of the trading platform.
model User {
  /// Unique identifier for the user. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// The user's full name.
  name String?

  /// The user's email address, must be unique.
  email String? @unique

  /// Timestamp when the user's email was verified. SKIP=true
  emailVerified DateTime?

  /// URL to the user's profile image.
  image String?

  /// Timestamp when the user account was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the user account was last updated. SKIP=true
  updatedAt DateTime @default(now())

  /// The role assigned to the user, determining permissions.
  role UserRole @default(USER)

  /// A short biography or description of the user.
  bio String?

  /// The user's job title or position.
  jobTitle String?

  /// The type of Alpaca account the user currently holds.
  currentAccount AlpacaAccountType @default(PAPER)

  /// Relation to the Customer model. INCLUDE=['id','name','plan']
  customer Customer? @relation(fields: [customerId], references: [id])

  /// Foreign key referencing the Customer. SKIP=true
  customerId Int?

  /// List of accounts associated with the user. SKIP=true
  accounts Account[]

  /// List of sessions associated with the user. SKIP=true
  sessions Session[]

  /// List of authenticators for the user. SKIP=true
  authenticators Authenticator[]

  /// The subscription plan the user is enrolled in.
  plan SubscriptionPlan?

  /// List of Alpaca accounts linked to the user. INCLUDE=['id','type']
  alpacaAccounts AlpacaAccount[]

  @@map(name: "users")
}

// Represents an Alpaca trading account linked to a user.
model AlpacaAccount {
  /// Unique identifier for the Alpaca account. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// The type of Alpaca account (PAPER or LIVE).
  type AlpacaAccountType @default(PAPER)

  /// API key for authenticating requests to Alpaca. SKIP=true
  APIKey String

  /// API secret for authenticating requests to Alpaca. SKIP=true
  APISecret String

  /// JSON configuration settings for the Alpaca account.
  configuration Json?

  /// Indicates whether the market is currently open for trading.
  marketOpen Boolean @default(false)

  /// Relation to the User model who owns this Alpaca account. SKIP=true
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Foreign key referencing the User. SKIP=true
  userId String @db.Uuid

  /// Timestamp when the Alpaca account was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the Alpaca account was last updated. SKIP=true
  updatedAt DateTime @default(now())

  /// List of trades executed through this Alpaca account. SKIP=true
  trades Trade[]

  /// List of orders placed through this Alpaca account. SKIP=true
  orders Order[]

  /// List of positions held in this Alpaca account. INCLUDE=['id','qty','asset']
  positions Position[]

  /// List of alerts generated for this Alpaca account. SKIP=true
  alerts Alert[]
}

// Represents a financial position held in an Alpaca account.
model Position {
  /// Unique identifier for the position. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the associated asset. SKIP=true
  assetId String @db.Uuid

  /// Relation to the Asset model. INCLUDE=['symbol','name','type']
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  /// The average price at which the asset was acquired.
  averageEntryPrice Float

  /// Total quantity of the asset held.
  qty Float

  /// Quantity of the asset available for trading.
  qtyAvailable Float

  /// Current market value of the position.
  marketValue Float

  /// Total cost basis of the position.
  costBasis Float

  /// Unrealized profit or loss of the position.
  unrealizedPL Float

  /// Unrealized profit or loss as a percentage.
  unrealizedPLPC Float

  /// Unrealized intraday profit or loss.
  unrealisedIntradayPL Float

  /// Unrealized intraday profit or loss as a percentage.
  unrealisedIntradayPLPC Float

  /// Current price of the asset.
  currentPrice Float

  /// Last traded price of the asset.
  lastTradePrice Float

  /// Price change of the asset for the day.
  changeToday Float

  /// Indicates if the asset is marginable.
  assetMarginable Boolean

  /// Relation to the AlpacaAccount model, if applicable. SKIP=true
  alpacaAccount AlpacaAccount? @relation(fields: [alpacaAccountId], references: [id], onDelete: Cascade)

  /// Foreign key referencing the AlpacaAccount. SKIP=true
  alpacaAccountId String @db.Uuid
}

// Represents an authenticator for multi-factor authentication.
model Authenticator {
  /// Unique identifier for the authenticator. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the user who owns this authenticator. SKIP=true
  userId String @db.Uuid

  /// Unique credential ID for the authenticator. SKIP=true
  credentialID String @unique

  /// Public key associated with the authenticator. SKIP=true
  publicKey String

  /// Counter for the number of authentication attempts. SKIP=true
  counter Int

  /// Relation to the User model. SKIP=true
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Timestamp when the authenticator was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the authenticator was last updated. SKIP=true
  updatedAt DateTime @default(now())

  @@index([userId])
  @@map(name: "authenticators")
}

// Represents an external account linked to a user for authentication.
model Account {
  /// Unique identifier for the account. SKIP=true
  id String @id @default(cuid())

  /// Reference to the user who owns this account. SKIP=true
  userId String @db.Uuid

  /// Type of the account (e.g., OAuth provider).
  type String

  /// Provider of the account (e.g., Google, GitHub).
  provider String

  /// Unique identifier provided by the external provider.
  providerAccountId String

  /// Refresh token for the external account, if applicable. SKIP=true
  refresh_token String? @db.Text

  /// Access token for the external account, if applicable. SKIP=true
  access_token String? @db.Text

  /// Expiration time of the access token.
  expires_at Int?

  /// Type of the token (e.g., Bearer).
  token_type String?

  /// Scope of access granted by the token.
  scope String?

  /// ID token for authentication, if applicable. SKIP=true
  id_token String? @db.Text

  /// State of the session associated with the account.
  session_state String?

  /// Timestamp when the account was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the account was last updated. SKIP=true
  updatedAt DateTime @default(now())

  /// Relation to the User model. SKIP=true
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

// Represents a token used for verifying user actions, such as password resets.
model VerificationToken {
  /// Unique identifier for the verification token. SKIP=true
  id String @id @default(cuid())

  /// Identifier associated with the token (e.g., user ID). SKIP=true
  identifier String

  /// The verification token string, must be unique. SKIP=true
  token String @unique

  /// Expiration date and time of the token. SKIP=true
  expires DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// Represents a customer entity, which may include multiple users.
model Customer {
  /// Unique identifier for the customer. SKIP=true
  id Int @id @default(autoincrement())

  /// Reference to the authenticated user associated with the customer. SKIP=true
  authUserId String

  /// Name of the customer.
  name String?

  /// Subscription plan the customer is enrolled in.
  plan SubscriptionPlan?

  /// Unique Stripe customer ID for billing. SKIP=true
  stripeCustomerId String? @unique

  /// Unique Stripe subscription ID. SKIP=true
  stripeSubscriptionId String? @unique

  /// Stripe price ID associated with the customer's subscription. SKIP=true
  stripePriceId String?

  /// End date of the current billing period in Stripe.
  stripeCurrentPeriodEnd DateTime?

  /// Timestamp when the customer was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the customer was last updated. SKIP=true
  updatedAt DateTime @default(now())

  /// List of users associated with the customer. INCLUDE=['id','name','email']
  users User[]

  @@index([authUserId])
}

// Represents a financial asset available for trading.
model Asset {
  /// Unique identifier for the asset. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Ticker symbol of the asset, must be unique.
  symbol String @unique

  /// Full name of the asset, must be unique.
  name String @unique

  /// Type of the asset, defined by AssetType enum.
  type AssetType

  /// URL to the asset's logo image. SKIP=true
  logoUrl String?

  /// Description of the asset. SKIP=true
  description String?

  /// Central Index Key for the asset. SKIP=true
  cik String?

  /// Stock exchange where the asset is listed. SKIP=true
  exchange String?

  /// Currency in which the asset is traded. SKIP=true
  currency String?

  /// Country where the asset is based. SKIP=true
  country String?

  /// Sector classification of the asset. SKIP=true
  sector String?

  /// Industry classification of the asset. SKIP=true
  industry String?

  /// Physical address associated with the asset. SKIP=true
  address String?

  /// Official website of the asset. SKIP=true
  officialSite String?

  /// Fiscal year-end date of the asset. SKIP=true
  fiscalYearEnd String?

  /// Date of the latest financial quarter. SKIP=true
  latestQuarter String?

  /// Market capitalization of the asset. SKIP=true
  marketCapitalization String?

  /// Earnings Before Interest, Taxes, Depreciation, and Amortization. SKIP=true
  ebitda String?

  /// Price-to-Earnings ratio. SKIP=true
  peRatio String?

  /// Price/Earnings to Growth ratio. SKIP=true
  pegRatio String?

  /// Book value per share. SKIP=true
  bookValue String?

  /// Dividend per share. SKIP=true
  dividendPerShare String?

  /// Dividend yield percentage. SKIP=true
  dividendYield String?

  /// Earnings per share. SKIP=true
  eps String?

  /// Revenue per share over the trailing twelve months. SKIP=true
  revenuePerShareTTM String?

  /// Profit margin percentage. SKIP=true
  profitMargin String?

  /// Operating margin over the trailing twelve months. SKIP=true
  operatingMarginTTM String?

  /// Return on assets over the trailing twelve months. SKIP=true
  returnOnAssetsTTM String?

  /// Return on equity over the trailing twelve months. SKIP=true
  returnOnEquityTTM String?

  /// Total revenue over the trailing twelve months. SKIP=true
  revenueTTM String?

  /// Gross profit over the trailing twelve months. SKIP=true
  grossProfitTTM String?

  /// Diluted earnings per share over the trailing twelve months. SKIP=true
  dilutedEPSTTM String?

  /// Year-over-year growth in quarterly earnings. SKIP=true
  quarterlyEarningsGrowthYOY String?

  /// Year-over-year growth in quarterly revenue. SKIP=true
  quarterlyRevenueGrowthYOY String?

  /// Analyst target price for the asset. SKIP=true
  analystTargetPrice String?

  /// Percentage of analysts rating the asset as Strong Buy. SKIP=true
  analystRatingStrongBuy String?

  /// Percentage of analysts rating the asset as Buy. SKIP=true
  analystRatingBuy String?

  /// Percentage of analysts rating the asset as Hold. SKIP=true
  analystRatingHold String?

  /// Percentage of analysts rating the asset as Sell. SKIP=true
  analystRatingSell String?

  /// Percentage of analysts rating the asset as Strong Sell. SKIP=true
  analystRatingStrongSell String?

  /// Trailing Price-to-Earnings ratio. SKIP=true
  trailingPE String?

  /// Forward Price-to-Earnings ratio. SKIP=true
  forwardPE String?

  /// Price-to-Sales ratio over the trailing twelve months. SKIP=true
  priceToSalesRatioTTM String?

  /// Price-to-Book ratio. SKIP=true
  priceToBookRatio String?

  /// Enterprise Value to Revenue ratio. SKIP=true
  evToRevenue String?

  /// Enterprise Value to EBITDA ratio. SKIP=true
  evToEbitda String?

  /// Beta coefficient measuring volatility. SKIP=true
  beta String?

  /// 52-week high price of the asset. SKIP=true
  week52High String?

  /// 52-week low price of the asset. SKIP=true
  week52Low String?

  /// 50-day moving average price. SKIP=true
  day50MovingAverage String?

  /// 200-day moving average price. SKIP=true
  day200MovingAverage String?

  /// Total number of shares outstanding. SKIP=true
  sharesOutstanding String?

  /// Date when the next dividend is paid. SKIP=true
  dividendDate String?

  /// Date when the asset goes ex-dividend. SKIP=true
  exDividendDate String?

  /// Last sell price of the asset. SKIP=true
  sellPrice String?

  /// Last buy price of the asset. SKIP=true
  buyPrice String?

  /// Timestamp when the asset was created in the database. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the asset was last updated in the database. SKIP=true
  updatedAt DateTime @default(now())

  /// List of trades involving this asset. SKIP=true
  trades Trade[]

  /// List of orders involving this asset. SKIP=true
  orders Order[]

  /// List of positions involving this asset. SKIP=true
  positions Position[]

  /// List of news article sentiments related to this asset. SKIP=true
  newsMentions NewsArticleAssetSentiment[]

  @@map(name: "assets")
}

// Represents a trade executed through an Alpaca account.
model Trade {
  /// Unique identifier for the trade. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the Alpaca account used for the trade. SKIP=true
  alpacaAccountId String @db.Uuid

  /// Reference to the asset being traded. SKIP=true
  assetId String @db.Uuid

  /// Quantity of the asset being traded.
  qty Float

  /// Price at which the asset was traded.
  price Float

  /// Total value of the trade (qty * price).
  total Float

  /// Signal that triggered the trade.
  signal String

  /// Strategy used to execute the trade.
  strategy String

  /// Analysis supporting the trade decision.
  analysis String

  /// Confidence level in the trade decision.
  confidence Float

  /// Timestamp when the trade was executed. SKIP=true
  timestamp DateTime @default(now()) @map(name: "timestamp")

  /// Timestamp when the trade record was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the trade record was last updated. SKIP=true
  updatedAt DateTime @default(now())

  /// Current status of the trade.
  status TradeStatus @default(PENDING)

  /// Relation to the AlpacaAccount model. SKIP=true
  alpacaAccount AlpacaAccount @relation(fields: [alpacaAccountId], references: [id], onDelete: Cascade)

  /// Relation to the Asset model. INCLUDE=['symbol','name','type']
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  /// If the asset.type is OPTION, then provide type of contract (CALL or PUT).
  optionContractType OptionContractType? @default(CALL)

  /// List of actions associated with this trade.
  actions Action[]

  @@map(name: "trades")
}

// Represents an action performed as part of a trade.
model Action {
  /// Unique identifier for the action. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Sequence number of the action within the trade.
  sequence Int

  /// Reference to the trade this action is part of. SKIP=true
  tradeId String @db.Uuid

  /// Type of trade action, defined by ActionType enum.
  type ActionType

  /// Additional notes or comments about the action.
  note String

  /// Current status of the trade action.
  status ActionStatus @default(STAGED)

  /// Fees associated with the action.
  fee Float?

  /// The trade this action is part of. SKIP=true
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  /// The order associated with this action.
  order Order? @relation
}

// Represents an order placed through an Alpaca account.
model Order {
  /// Unique identifier for the order. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the Alpaca account used for the order. SKIP=true
  alpacaAccountId String @db.Uuid

  /// Reference to the asset being ordered. SKIP=true
  assetId String @db.Uuid

  /// Quantity of the asset to be ordered.
  qty Float?

  /// Notional value of the order. Optional, used if qty is not provided.
  notional Float?

  /// Side of the order (BUY or SELL).
  side OrderSide

  /// Type of order (market, limit, stop, stop_limit, trailing_stop).
  type OrderType

  /// Time in force for the order (day, gtc, opg, cls, ioc, fok).
  timeInForce TimeInForce

  /// Limit price for limit or stop-limit orders.
  limitPrice Float?

  /// Stop price for stop or stop-limit orders.
  stopPrice Float?

  /// Trailing price for trailing stop orders.
  trailPrice Float?

  /// Trailing percent for trailing stop orders.
  trailPercent Float?

  /// Whether the order is eligible for extended hours.
  extendedHours Boolean?

  /// Client-supplied identifier for the order.
  clientOrderId String? @unique

  /// Current status of the order.
  status OrderStatus

  /// Timestamp when the order was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the order was last updated. SKIP=true
  updatedAt DateTime @default(now())

  /// Timestamp when the order was submitted.
  submittedAt DateTime?

  /// Timestamp when the order was filled.
  filledAt DateTime?

  /// Average price at which the order was filled.
  filledAvgPrice Float?

  /// Reference to the action associated with the order. SKIP=true
  actionId String @unique @db.Uuid

  /// The Alpaca account this order is associated with. SKIP=true
  alpacaAccount AlpacaAccount @relation(fields: [alpacaAccountId], references: [id], onDelete: Cascade)

  /// The action this order is associated with. SKIP=true
  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  /// The asset this order is for. INCLUDE=['symbol','name','type']
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  /// Fee associated with the order.
  fee Float?

  @@map(name: "orders")
}

// Represents an alert generated by the system for the user.
model Alert {
  /// Unique identifier for the alert. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the Alpaca account associated with the alert. SKIP=true
  alpacaAccountId String @db.Uuid

  /// Message content of the alert.
  message String

  /// Type of the alert, defined by AlertType enum.
  type AlertType

  /// Indicates whether the alert has been read by the user.
  isRead Boolean @default(false)

  /// Timestamp when the alert was created. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the alert was last updated. SKIP=true
  updatedAt DateTime @default(now())

  /// Relation to the AlpacaAccount model. SKIP=true
  alpacaAccount AlpacaAccount @relation(fields: [alpacaAccountId], references: [id], onDelete: Cascade)

  @@map(name: "alerts")
}

// Represents a news article related to financial markets.
model NewsArticle {
  /// Unique identifier for the news article. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Title of the news article.
  title String

  /// Full content of the news article.
  content String?

  /// Source of the news article (e.g., Bloomberg, Reuters).
  source String

  /// Domain of the source website.
  sourceDomain String?

  /// URL to the original news article, must be unique.
  url String @unique

  /// Sentiment analysis result of the article.
  sentiment String

  /// List of authors who wrote the article.
  authors String[]

  /// Summary or abstract of the news article.
  summary String?

  /// URL to the banner image of the article.
  bannerImage String?

  /// Publication time of the article.
  timePublished String

  /// Category or genre of the news article.
  category String?

  /// Topics covered in the news article.
  topics String[]

  /// URL to the logo image of the news source.
  logo String?

  /// Timestamp when the news article was added to the database. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the news article was last updated in the database. SKIP=true
  updatedAt DateTime @default(now())

  /// List of asset sentiments related to this news article. SKIP=true
  assets NewsArticleAssetSentiment[]

  @@map(name: "news")
}

// Represents the sentiment of a news article towards a specific asset.
model NewsArticleAssetSentiment {
  /// Unique identifier for the sentiment record. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Reference to the associated asset. SKIP=true
  assetId String @db.Uuid

  /// Reference to the associated news article. SKIP=true
  newsArticleId String @db.Uuid

  /// URL of the news article, must be unique.
  url String @unique

  /// Relation to the NewsArticle model. SKIP=true
  news NewsArticle @relation(fields: [newsArticleId], references: [id])

  /// Relation to the Asset model. INCLUDE=['symbol','name','type']
  asset Asset @relation(fields: [assetId], references: [id])

  /// Relevancy score indicating how relevant the news is to the asset.
  relevancyScore String?

  /// Sentiment score derived from the news content.
  sentimentScore String?

  /// Label indicating the overall sentiment (e.g., Positive, Negative, Neutral).
  sentimentLabel String?
}

// Represents an economic event that may impact the markets.
model EconomicEvent {
  /// Unique identifier for the economic event. SKIP=true
  id String @id @default(uuid()) @db.Uuid

  /// Title or name of the economic event.
  title String

  /// Detailed description of the economic event.
  description String?

  /// Date and time when the economic event is scheduled to occur.
  date DateTime

  /// Importance level of the event, defined by EventImportance enum.
  importance EventImportance

  /// Timestamp when the economic event was created in the database. SKIP=true
  createdAt DateTime @default(now())

  /// Timestamp when the economic event was last updated in the database. SKIP=true
  updatedAt DateTime @default(now())

  @@map(name: "economic_events")
}
