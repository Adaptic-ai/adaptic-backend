generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id               String          @id @default(uuid()) @db.Uuid
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime        @default(now()) @map(name: "created_at")
  updatedAt        DateTime        @default(now()) @map(name: "updated_at")
  role             UserRole        @default(USER)
  workspaces       WorkspaceUser[]
  currentWorkspace String?
  customer         Customer?       @relation(fields: [customerId], references: [id])
  customerId       Int?
  accounts         Account[]
  sessions         Session[]
  authenticators   Authenticator[]

  plan SubscriptionPlan?

  @@map(name: "users")
}

model Authenticator {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  credentialID String   @unique
  publicKey    String
  counter      Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@index([userId])
  @@map(name: "authenticators")
}

model Account {
  id     String @id @default(cuid())
  userId String @db.Uuid

  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Workspace {
  id                    String                @id @default(uuid()) @db.Uuid
  name                  String
  slug                  String                @unique
  description           String?
  image                 String?
  colors                Json?
  website               String?
  emailDomain           String?
  addUsersByEmailDomain Boolean?
  industry              String?
  foundingYear          Int?
  legalName             String?
  address               String?
  postalCode            String?
  telephone             String?
  email                 String?
  sameAs                String[]
  headquarters          String?
  areasOfFocus          String[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  workflows             Workflow[]
  environmentVariables  EnvironmentVariable[]
  users                 WorkspaceUser[]
  resources             WorkspaceResource[]

  @@unique([name, slug])
}

model WorkspaceUser {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  workspaceId String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        UserRole  @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model Workflow {
  id          String            @id @default(uuid()) @db.Uuid
  name        String
  slug        String
  description String?
  triggerType TriggerType
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  workspaceId String            @db.Uuid
  workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  actions     Action[]
  triggers    WorkflowTrigger[]
  schedules   Schedule[]

  @@unique([workspaceId, name])
  @@unique([workspaceId, slug])
}

model Action {
  id                   String                      @id @default(uuid()) @db.Uuid
  name                 String
  slug                 String
  description          String?
  code                 String?
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @default(now())
  workflowId           String                      @db.Uuid
  workflow             Workflow                    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  environmentVariables ActionEnvironmentVariable[]
  testData             TestData?
  error                String?
  actionTriggers       ActionTriggerRel[]
  resourceActions      ResourceAction[]
  dependencies         Dependency[]
  schedules            Schedule[]
  steps                Step[]
  input                InputObject[]
  output               OutputObject[]
  ActionDependency     ActionDependency[]

  @@unique([workflowId, name])
  @@unique([workflowId, slug])
}

model Step {
  id                   String                @id @default(uuid()) @db.Uuid
  name                 String
  type                 StepType
  description          String
  internalSteps        String[]
  dependencies         Dependency[]
  resources            Resource[]
  environmentVariables EnvironmentVariable[]
  actionId             String                @db.Uuid
  action               Action                @relation(fields: [actionId], references: [id], onDelete: Cascade)
  input                InputObject[]
  output               OutputObject[]
  testData             TestData?
}

enum StepType {
  LAMBDA_FUNCTION
  PRIVATE_NPM
  INTERNAL
}

model Dependency {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  type             DependencyType
  version          String?
  url              String?
  website          String?
  description      String?
  step             Step[]
  action           Action[]
  documentations   Documentation[]    @relation("DependencyDocumentations")
  ActionDependency ActionDependency[]

  @@unique([name, type])
}

model Documentation {
  id           String       @id @default(uuid()) @db.Uuid
  title        String
  summary      String
  content      String
  dependencyId String       @db.Uuid
  dependency   Dependency   @relation("DependencyDocumentations", fields: [dependencyId], references: [id], onDelete: Cascade)
  subsections  Subsection[]
  examples     Example[]
  tags         Tag[]
  useCases     UseCase[]
  tagId        String?      @db.Uuid

  @@index([dependencyId])
}

model Subsection {
  id              String        @id @default(uuid()) @db.Uuid
  title           String
  content         String
  documentationId String        @db.Uuid
  documentation   Documentation @relation(fields: [documentationId], references: [id], onDelete: Cascade)
  examples        Example[]

  @@index([documentationId])
}

model Example {
  id              String         @id @default(uuid()) @db.Uuid
  title           String
  description     String
  code            String
  documentationId String?        @db.Uuid
  documentation   Documentation? @relation(fields: [documentationId], references: [id], onDelete: Cascade)
  subsectionId    String?        @db.Uuid
  subsection      Subsection?    @relation(fields: [subsectionId], references: [id], onDelete: Cascade)

  @@index([documentationId])
  @@index([subsectionId])
}

model Tag {
  id              String         @id @default(uuid()) @db.Uuid
  name            String
  documentation   Documentation? @relation(fields: [documentationId], references: [id])
  documentationId String?        @db.Uuid

  @@unique([name])
}

model UseCase {
  id              String        @id @default(uuid()) @db.Uuid
  title           String
  description     String
  documentationId String        @db.Uuid
  documentation   Documentation @relation(fields: [documentationId], references: [id], onDelete: Cascade)

  @@index([documentationId])
}

model Resource {
  id     String       @id @default(uuid()) @db.Uuid
  name   String
  type   ResourceType
  stepId String       @db.Uuid
  step   Step         @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@index([stepId])
}

model EnvironmentVariable {
  id            String                      @id @default(uuid()) @db.Uuid
  key           String
  value         String
  description   String?
  workspaceId   String                      @db.Uuid
  workspace     Workspace                   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @default(now())
  actionEnvVars ActionEnvironmentVariable[]
  stepId        String?                     @db.Uuid
  step          Step?                       @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, key])
}

model ActionEnvironmentVariable {
  id                    String              @id @default(uuid()) @db.Uuid
  actionId              String              @db.Uuid
  action                Action              @relation(fields: [actionId], references: [id], onDelete: Cascade)
  environmentVariableId String              @db.Uuid
  environmentVariable   EnvironmentVariable @relation(fields: [environmentVariableId], references: [id], onDelete: Cascade)
  value                 String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now())

  @@unique([actionId, environmentVariableId])
}

model TestData {
  id        String   @id @default(uuid()) @db.Uuid
  actionId  String   @unique @db.Uuid
  action    Action?  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  stepId    String?  @unique @db.Uuid
  step      Step?    @relation(fields: [stepId], references: [id], onDelete: Cascade)
  input     Json?
  output    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResourceAction {
  id                  String            @id @default(uuid()) @db.Uuid
  actionId            String            @db.Uuid
  action              Action            @relation(fields: [actionId], references: [id], onDelete: Cascade)
  workspaceResourceId String            @db.Uuid
  workspaceResource   WorkspaceResource @relation(fields: [workspaceResourceId], references: [id], onDelete: Cascade)
  operationType       OperationType
  status              OperationStatus
  logs                String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())

  @@unique([actionId, workspaceResourceId])
}

model ActionDependency {
  id           String     @id @default(uuid()) @db.Uuid
  actionId     String     @db.Uuid
  action       Action     @relation(fields: [actionId], references: [id], onDelete: Cascade)
  dependencyId String     @db.Uuid
  dependency   Dependency @relation(fields: [dependencyId], references: [id], onDelete: Cascade)
  config       Json?

  @@unique([actionId, dependencyId])
}

model Schedule {
  id         String    @id @default(uuid()) @db.Uuid
  frequency  String
  startDate  DateTime?
  endDate    DateTime?
  workflowId String?   @unique @db.Uuid
  workflow   Workflow? @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  actionId   String?   @unique @db.Uuid
  action     Action?   @relation(fields: [actionId], references: [id], onDelete: Cascade)
}

model Trigger {
  id               String             @id @default(uuid()) @db.Uuid
  eventType        EventType
  configuration    Json?
  actionTriggers   ActionTriggerRel[]
  workflowTriggers WorkflowTrigger[]
}

model WorkflowTrigger {
  id         String   @id @default(uuid()) @db.Uuid
  workflowId String   @db.Uuid
  triggerId  String   @db.Uuid
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  trigger    Trigger  @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@unique([workflowId, triggerId])
}

model ActionTriggerRel {
  id        String  @id @default(uuid()) @db.Uuid
  actionId  String  @db.Uuid
  action    Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  triggerId String  @db.Uuid
  trigger   Trigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@unique([actionId, triggerId])
}

model Customer {
  id                     Int               @id @default(autoincrement())
  authUserId             String
  name                   String?
  plan                   SubscriptionPlan?
  stripeCustomerId       String?           @unique
  stripeSubscriptionId   String?           @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now())
  users                  User[]

  @@index([authUserId])
}

model WorkspaceResource {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  description String?
  type        ResourceType
  config      Json
  status      ResourceStatus
  workspaceId String           @db.Uuid
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  actions     ResourceAction[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())

  @@unique([workspaceId, name])
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
}

enum Status {
  PENDING
  CREATING
  INITING
  RUNNING
  STOPPED
  DELETED
}

enum ResourceType {
  EC2_INSTANCE
  S3_BUCKET
  NETLIFY_SITE
  MAPBOX_INSTANCE
  AMAZON_STORE
  WORDPRESS_INSTANCE
  NEXTJS_APP
  GITHUB_REPO
  CICD_PIPELINE
  OTHER
  WEB_APP
  BACKEND_INSTANCE
}

enum ResourceStatus {
  PENDING
  PROVISIONING
  ACTIVE
  FAILED
  DEPROVISIONING
  INACTIVE
}

enum OperationType {
  CREATE
  UPDATE
  DELETE
  DEPLOY
}

enum OperationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum DependencyType {
  NODE_MODULE
  PYTHON_PACKAGE
  API
  SAAS_PLATFORM
  UI_AUTOMATION
  UNSTRUCTURED_IO
  OTHER
}

enum TriggerType {
  EVENT
  SCHEDULE
  BOTH
}

enum EventType {
  USER_REQUEST
  WEBHOOK
  SYSTEM_EVENT
  WORKFLOW_COMPLETION
  ACTION_COMPLETION
  CUSTOM
}

model InputObject {
  id         String      @id @default(uuid()) @db.Uuid
  actionId   String      @db.Uuid
  action     Action      @relation(fields: [actionId], references: [id], onDelete: Cascade)
  stepId     String      @db.Uuid
  step       Step        @relation(fields: [stepId], references: [id], onDelete: Cascade)
  parameters Parameter[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
}

model OutputObject {
  id         String      @id @default(uuid()) @db.Uuid
  actionId   String      @db.Uuid
  action     Action      @relation(fields: [actionId], references: [id], onDelete: Cascade)
  stepId     String      @db.Uuid
  step       Step        @relation(fields: [stepId], references: [id], onDelete: Cascade)
  parameters Parameter[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
}

model Parameter {
  id       String        @id @default(uuid()) @db.Uuid
  key      String
  type     ParamType
  value    Json
  required Boolean
  inputId  String?       @db.Uuid
  input    InputObject?  @relation(fields: [inputId], references: [id], onDelete: Cascade)
  outputId String?       @db.Uuid
  output   OutputObject? @relation(fields: [outputId], references: [id], onDelete: Cascade)
}

enum ParamType {
  STRING
  NUMBER
  BOOLEAN
  OBJECT
  ARRAY
}
